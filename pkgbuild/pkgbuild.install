#!/usr/bin/env bash
# This file contains scripts that are executed at different stages of package installation/upgrade/removal

# Color definitions for status messages
blueDark="\e[1;38;5;33m"     # Bold dark blue
mediumBlue="\e[1;38;5;32m"   # Bold medium blue
lightBlue="\e[1;38;5;39m"    # Bold light blue
cyan="\e[1;38;5;45m"         # Bold cyan
white="\e[1;97m"             # Bold white
reset="\e[0m"                # Reset text formatting

# Print status messages
printMsg() {
    local message=$1
    echo -e "${blueDark}[${lightBlue}bigblocks${blueDark}]${reset} ${cyan}â†’${reset} ${white}${message}${reset}"
}

# Function executed before package installation
# pre_install() {
#     printMsg "Preparing to install the package..."
#     # Example: Check for system dependencies
#     # if ! command -v required_command &> /dev/null; then
#     #     printMsg "Error: required_command not found. Please install it before continuing."
#     #     exit 1
#     # fi
# }

# Function executed after package installation
post_install() {
    printMsg "Configuring the package after installation..."
    
    # Check for zip file and extract it
    if [ -f "/opt/bigblocks/Big_Blocks-x86_64.zip" ]; then
        printMsg "Found Big_Blocks-x86_64.zip, extracting (overwriting existing files)..."
        cd /opt/bigblocks
        
        if command -v unzip &> /dev/null; then
            # Force overwrite with -o flag, quiet with -q flag
            unzip -o -q Big_Blocks-x86_64.zip
            if [ $? -eq 0 ]; then
                printMsg "Successfully extracted Big_Blocks-x86_64.zip"
                printMsg "Removing zip file..."
                rm -f Big_Blocks-x86_64.zip
                printMsg "Zip file removed"
            else
                printMsg "Error: Failed to extract zip file"
            fi
        else
            printMsg "Error: unzip command not found. Please install unzip package."
        fi
    else
        printMsg "No Big_Blocks-x86_64.zip found in /opt/bigblocks/"
    fi
}

# Function executed before package upgrade
# pre_upgrade() {
#     printMsg "Preparing to upgrade the package..."
#     # Example: Backup configuration files
#     # cp /etc/mypackage/config.conf /etc/mypackage/config.conf.bak
#     # printMsg "Configuration backup created"
# }

# Function executed after package upgrade
post_upgrade() {
    printMsg "Finalizing package upgrade..."
    # Call post_install to ensure all configurations are applied
    post_install
}

# Function executed before package removal
# pre_remove() {
#     printMsg "Preparing to remove the package..."
#     # Example: Stop services
#     # systemctl stop myservice.service
#     # systemctl disable myservice.service
#     # printMsg "Services stopped"
# }

# Function executed after package removal
# post_remove() {
#     printMsg "Cleaning up after package removal..."
#     # Example: Remove data directories created by the package
#     # rm -rf /var/lib/mypackage
#     # printMsg "Package directories removed"
#
#     # printMsg "If you want to remove all user data, run:"
#     # printMsg "rm -rf /home/*/mypackage_data"
# }
